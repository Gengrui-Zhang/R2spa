% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_fscore.R
\name{get_fs_lavaan}
\alias{get_fs_lavaan}
\title{Get Factor Scores and the Corresponding Standard Error of Measurement}
\usage{
get_fs_lavaan(
  lavobj,
  method = c("regression", "Bartlett"),
  corrected_fsT = FALSE,
  vfsLT = FALSE,
  reliability = FALSE
)
}
\arguments{
\item{lavobj}{A lavaan model object when using \code{\link[=get_fs_lavaan]{get_fs_lavaan()}}.}

\item{method}{Character. Method for computing factor scores (options are
"regression" or "Bartlett"). Currently, the default is
"regression" to be consistent with
\code{\link[lavaan]{lavPredict}}, but the Bartlett scores have
more desirable properties and may be preferred for 2S-PA.}

\item{corrected_fsT}{Logical. Whether to correct for the sampling
error in the factor score weights when computing
the error variance estimates of factor scores.}

\item{vfsLT}{Logical. Whether to return the covariance matrix of \code{fsT}
and \code{fsL}, which can be used as input for \code{\link[=vcov_corrected]{vcov_corrected()}}
to obtain corrected covariances and standard errors for
\code{\link[=tspa]{tspa()}} results. This is currently ignored.}

\item{reliability}{Logical. Whether to return the reliability of factor
scores.}
}
\value{
A data frame containing the factor scores (with prefix \code{"fs_"}),
the standard errors (with suffix \code{"_se"}), the implied loadings
of factor \code{"_by_"} factor scores, and the error variance-covariance
of the factor scores (with prefix \code{"evfs_"}). The following are
also returned as attributes:
* \code{fsT}: error covariance of factor scores
* \code{fsL}: loading matrix of factor scores
* \code{fsb}: intercepts of factor scores
* \code{scoring_matrix}: weights for computing factor scores from items
}
\description{
Get Factor Scores and the Corresponding Standard Error of Measurement
}
\examples{
library(lavaan)
get_fs(PoliticalDemocracy[c("x1", "x2", "x3")])

# Multiple factors
get_fs(PoliticalDemocracy[c("x1", "x2", "x3", "y1", "y2", "y3", "y4")],
       model = " ind60 =~ x1 + x2 + x3
                 dem60 =~ y1 + y2 + y3 + y4 ")

# Multiple-group
hs_model <- ' visual  =~ x1 + x2 + x3 '
fit <- cfa(hs_model,
           data = HolzingerSwineford1939,
           group = "school")
get_fs(HolzingerSwineford1939, hs_model, group = "school")
# Or without the model
get_fs(HolzingerSwineford1939[c("school", "x4", "x5", "x6")],
       group = "school")
}
